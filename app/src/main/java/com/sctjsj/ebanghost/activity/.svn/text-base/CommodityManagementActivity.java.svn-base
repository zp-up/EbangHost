package com.sctjsj.ebanghost.activity;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;

import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import com.sctjsj.ebanghost.R;
import com.sctjsj.ebanghost.application.MyApp;
import com.sctjsj.ebanghost.bean.ClassifyBean;
import com.sctjsj.ebanghost.bean.GoodsBean;
import com.sctjsj.ebanghost.url.BnUrl;
import com.sctjsj.ebanghost.util.HorizontalListView;
import com.sctjsj.ebanghost.util.LogUtil;
import com.sctjsj.ebanghost.util.PopupList;
import com.sctjsj.ebanghost.util.ProgressUtil;
import com.squareup.picasso.Picasso;
import com.zcw.togglebutton.*;
import com.zcw.togglebutton.ToggleButton;


import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.xutils.common.Callback;
import org.xutils.http.RequestParams;
import org.xutils.x;

import java.util.ArrayList;
import java.util.List;
import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;
import q.rorbin.qrefreshlayout.QRefreshLayout;
import q.rorbin.qrefreshlayout.RefreshHandler;

/**
 * Created by Admin on 2016/11/16.
 */

public class CommodityManagementActivity extends AppCompatActivity {
    private MyApp app;
    private ProgressUtil pUtil;
    private List<GoodsBean> data;
    private int pageIndex=1;
    private MyAdapter adapter;

    @Bind(R.id.activity_commodity_manage_ll_parent)LinearLayout mLLParent;
    @Bind(R.id.activity_commodity_lv)ListView mListView;
    @Bind(R.id.activity_commodity_refresh)QRefreshLayout refresh;
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_commodity_manangement);
        app= (MyApp) getApplication();
        app.addActivity(this);
        ButterKnife.bind(this);
        pUtil=new ProgressUtil(this);
        data=new ArrayList<>();

        refresh.setLoadMoreEnable(true);
        refresh.setRefreshHandler(new RefreshHandler() {
            @Override
            public void onRefresh(QRefreshLayout refresh) {
                refreshData();
            }

            @Override
            public void onLoadMore(QRefreshLayout refresh) {
                loadMoreData();
            }
        });

    }

    @Override
    protected void onResume() {
        super.onResume();
        initData();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        ButterKnife.unbind(this);
        app.removeActivity(this);
    }

    @OnClick({R.id.activity_commodity_btn_add_goods,
            R.id.activity_commodity_btn_classify_mag,
            R.id.activity_commod_manage_back_ll})
    public void buttonListen(View view){
        switch (view.getId()){
            //添加商品
            case R.id.activity_commodity_btn_add_goods:
                Intent intent=new Intent(this, AddCommodityActivity.class);
                intent.putExtra("op","add");
                intent.putExtra("id",-1);
                startActivity(intent);
                this.overridePendingTransition(R.anim.activity_anim_start,R.anim.activity_anim_end);
                break;
            //分类管理
            case R.id.activity_commodity_btn_classify_mag:
                Intent intent1=new Intent(this, ChangeClassifActivity.class);
                startActivity(intent1);
                this.overridePendingTransition(R.anim.activity_anim_start,R.anim.activity_anim_end);
                break;
            //返回
            case R.id.activity_commod_manage_back_ll:
                finish();
                this.overridePendingTransition(R.anim.activity_anim_start,R.anim.activity_anim_end);
                break;
        }
    }

    public class MyAdapter extends BaseAdapter{

        @Override
        public int getCount() {
            return data.size();
        }

        @Override
        public Object getItem(int position) {
            return data.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(final int position, View view, ViewGroup parent) {
            Holder h;
            if(view==null){
                view= LayoutInflater.from(CommodityManagementActivity.this).inflate(R.layout.activity_commod_manager_item,null);
                h=new Holder();
                h.mIVLogo= (ImageView) view.findViewById(R.id.item_commodity_mag_iv_goods_logo);
                h.mTVName= (TextView) view.findViewById(R.id.item_commodity_mag_tv_goods_name);
                h.mTVPrice= (TextView) view.findViewById(R.id.item_commodity_mag_tv_price);
                h.mTVStatue= (TextView) view.findViewById(R.id.item_commodity_mag_tv_status);
                h.mTVDetails= (TextView) view.findViewById(R.id.item_commodity_mag_tv_details);
                h.toggle= (ToggleButton) view.findViewById(R.id.item_commodity_mag_toggle);
                h.listView= (HorizontalListView) view.findViewById(R.id.my_horizontal_lv);
                h.mLLParent= (LinearLayout) view.findViewById(R.id.activity_commodity_ll_parent);
                view.setTag(h);

            }else{
                h= (Holder) view.getTag();
            }

            //短按修改商品
            h.mLLParent.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Intent intent=new Intent(CommodityManagementActivity.this,AddCommodityActivity.class);
                    intent.putExtra("op","update");
                    intent.putExtra("id",data.get(position).getId());
                    startActivity(intent);
                }
            });

            //长按删除商品
            h.mLLParent.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    AlertDialog.Builder builder=new AlertDialog.Builder(CommodityManagementActivity.this);
                    builder.setTitle("删除提示");
                    builder.setMessage("确认删除该商品？");
                    builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                        }
                    });
                    builder.setPositiveButton("删除", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {

                        }
                    });
                    builder.show();

                    return true;
                }
            });


            Picasso.with(CommodityManagementActivity.this).load(data.get(position).getLogoUrl()).error(R.mipmap.icon_portrait_load_failed).into(h.mIVLogo);
            h.mTVName.setText(data.get(position).getName());
            h.mTVPrice.setText("￥"+data.get(position).getPrice());
            /**
             * 2-已上架
             * 1-仓库中
             * -1-已下架
             * -2-违规下架
             */
            switch (data.get(position).getStatus()){
                case 2:
                    h.mTVStatue.setText("已上架");
                    h.toggle.setToggleOn();
                    break;
                case -1:
                    h.mTVStatue.setText("已下架");
                    h.toggle.setToggleOff();
                    break;
                case 1:
                    h.mTVStatue.setText("仓库中");
                    h.toggle.setToggleOff();
                    break;
                case -2:
                    h.mTVStatue.setText("违规操作");
                    h.toggle.setToggleOff();
                    h.toggle.setEnabled(false);
                    break;
            }

            h.toggle.setOnToggleChanged(new ToggleButton.OnToggleChanged() {
                @Override
                public void onToggle(boolean on) {
                    //商品上架
                    if(on){
                        LogUtil.e("上架") ;
                        changeState(String.valueOf(data.get(position).getId()),"2");
                    } else{
                        //商品下架
                        LogUtil.e("下架") ;
                        changeState(String.valueOf(data.get(position).getId()),"-1");
                    }
                }
            });
            h.mTVDetails.setText(data.get(position).getDescription());
            h.listView.setAdapter(new HmyAdapter(data.get(position).getClassifyBeanList()));
            return view;
        }
        private class HmyAdapter extends BaseAdapter{
            private List<ClassifyBean> classifyBeanList;
            Context context;

            public HmyAdapter(List<ClassifyBean> classifyBeanList) {
                this.classifyBeanList=classifyBeanList;
            }
            @Override
            public int getCount() {
                return classifyBeanList.size();
            }

            @Override
            public Object getItem(int position) {
                return classifyBeanList.get(position);
            }

            @Override
            public long getItemId(int position) {
                return position;
            }

            @Override
            public View getView(int position, View view, ViewGroup parent) {
                XHolder xh;
                if(view==null){
                    view= LayoutInflater.from(CommodityManagementActivity.this).inflate(R.layout.activity_commod_manage_item_item,null);
                    xh=new XHolder();
                    xh.mTVClassify= (TextView) view.findViewById(R.id.activity_commodity_manage_item_tv_classify);
                    view.setTag(xh);
                }else{
                    xh= (XHolder) view.getTag();
                }
               xh.mTVClassify.setText(classifyBeanList.get(position).getName());
                return view;
            }
            class XHolder{
                TextView mTVClassify;
            }
        }

        class Holder{
            ImageView mIVLogo;
            LinearLayout mLLParent;
            TextView mTVName,mTVPrice,mTVStatue,mTVDetails;
            com.zcw.togglebutton.ToggleButton toggle;
            HorizontalListView listView;
        }



        }

    /**
     * 初始化店铺下的商品列表
     */
    private void initData(){
        pageIndex=1;
        data.clear();
        final RequestParams params=new RequestParams(BnUrl.queryGoodsListofShopUrl);
        params.setUseCookie(false);
        params.addBodyParameter("pageIndex",String.valueOf(pageIndex));
        params.addBodyParameter("size","9");
        params.addHeader("Cookie","none-cookie");
        params.addBodyParameter("ctype","store");
        params.addBodyParameter("cond","{id:"+app.getCurrentUser().getShopId()+"}");
        params.addBodyParameter("jf","goods1|photo|userGoodsClass");
        x.http().post(params, new Callback.ProgressCallback<JSONObject>() {
            @Override
            public void onSuccess(JSONObject response) {
                if(response!=null){
                    try {
                        JSONArray resultList=response.getJSONArray("resultList");
                        if(resultList.length()>0){
                            JSONObject store=resultList.getJSONObject(0);
                            JSONArray goods1=store.getJSONArray("goods1");//商品列表

                            for (int i=0;i<goods1.length();i++){
                                //商品对象
                                JSONObject g=goods1.getJSONObject(i);

                                int goodsId=g.getInt("id");//商品 id
                                String name=g.getString("name");//商品名称
                                double disPrice=g.getDouble("disPrice");//商品价格
                                String details=g.getString("details");//商品描述
                                String logo=g.getJSONObject("photo").getString("url");//商品 logo
                                int status=g.getInt("status");//商品状态

                                /**
                                 * ugc
                                 */
                                JSONArray userGoodsClass=g.getJSONArray("userGoodsClass");//
                                List<ClassifyBean>classifyBeenList=new ArrayList<ClassifyBean>();
                                for (int j=0;j<userGoodsClass.length();j++){
                                   String className= userGoodsClass.getJSONObject(j).getString("className");
                                    int id=userGoodsClass.getJSONObject(j).getInt("id");
                                    int level=userGoodsClass.getJSONObject(j).getInt("level");
                                    ClassifyBean cfb=new ClassifyBean();
                                    cfb.setId(id);
                                    cfb.setName(className);
                                    cfb.setLevel(level);
                                    classifyBeenList.add(cfb);
                                }

                                GoodsBean gb=new GoodsBean();
                                gb.setId(goodsId);
                                gb.setName(name);
                                gb.setPrice(disPrice);
                                gb.setDescription(details);
                                gb.setLogoUrl(logo);
                                gb.setStatus(status);
                                gb.setClassifyBeanList(classifyBeenList);
                                data.add(gb);
                            }

                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                    finally {
                        if(adapter==null){
                            adapter=new MyAdapter();
                            mListView.setAdapter(adapter);
                        }

                        adapter.notifyDataSetChanged();
                    }
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                pUtil.dismissProgress();
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {
                pUtil.dismissProgress();
            }

            @Override
            public void onWaiting() {

            }

            @Override
            public void onStarted() {
                pUtil.showProgress(false);
            }

            @Override
            public void onLoading(long total, long current, boolean isDownloading) {

            }
        });
    }

    private void refreshData(){

    }

    private void loadMoreData(){

    }

    /**
     * 改变商品状态
     * 2-正在营业
     * 3.关闭
     */
    private void changeState(final String goodsId, String s){
        RequestParams params=new RequestParams(BnUrl.modifyGoodsStatusUrl);
        params.setUseCookie(false);
        params.addHeader("Cookie",app.getSpf().getString("cookie","none-cookie"));
        params.addBodyParameter("ctype","goods");
        params.addBodyParameter("data","{id:"+goodsId+",status:"+s+"}");
        x.http().post(params, new Callback.ProgressCallback<JSONObject>() {
            @Override
            public void onSuccess(JSONObject response) {
                if(response!=null){
                    try {
                        LogUtil.e(response.toString());
                        boolean result=response.getBoolean("result");
                        //操作成功
                        if(result){
                           queryGoodsState(goodsId);
                        }else{
                           Snackbar.make(mLLParent,"商品状态修改失败",Snackbar.LENGTH_SHORT).show();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                pUtil.dismissProgress();
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }

            @Override
            public void onWaiting() {

            }

            @Override
            public void onStarted() {

            }

            @Override
            public void onLoading(long total, long current, boolean isDownloading) {

            }
        });
    }

    /**
     * 查询当前商品状态
     */
    private void queryGoodsState(String goodsId){
        RequestParams paramas=new RequestParams(BnUrl.queryGoodsStatusUrl);
        paramas.setUseCookie(false);
        paramas.addHeader("Cookie",app.getSpf().getString("cookie","none-cookie"));
        paramas.addBodyParameter("goodsId",goodsId);
        x.http().post(paramas, new Callback.ProgressCallback<JSONObject>() {
            @Override
            public void onSuccess(JSONObject result) {
                LogUtil.e(result.toString());
                try {
                    int status=result.getInt("status");


                    if(2==status){

                        Snackbar.make(mLLParent,"商品已上架",Snackbar.LENGTH_SHORT).show();
                    }
                    if(-1==status){

                        Snackbar.make(mLLParent,"商品已下架",Snackbar.LENGTH_SHORT).show();
                    }

                } catch (JSONException e) {
                    e.printStackTrace();
                }


            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                pUtil.dismissProgress();
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }

            @Override
            public void onWaiting() {

            }

            @Override
            public void onStarted() {

            }

            @Override
            public void onLoading(long total, long current, boolean isDownloading) {

            }
        });
    }
}

