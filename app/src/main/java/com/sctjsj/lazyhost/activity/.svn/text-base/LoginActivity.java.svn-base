package com.sctjsj.ebanghost.activity;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.igexin.sdk.PushManager;
import com.sctjsj.ebanghost.R;
import com.sctjsj.ebanghost.application.MyApp;
import com.sctjsj.ebanghost.bean.UserBean;
import com.sctjsj.ebanghost.receiver.MyPushReceiver;
import com.sctjsj.ebanghost.url.BnUrl;
import com.sctjsj.ebanghost.util.LogUtil;
import com.sctjsj.ebanghost.util.ProgressUtil;
import com.sctjsj.ebanghost.util.SessionUtil;
import com.squareup.picasso.Picasso;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Text;
import org.xutils.common.Callback;
import org.xutils.http.RequestParams;
import org.xutils.x;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * Created by Chris-Jason on 2016/11/9.
 */
public class LoginActivity extends AppCompatActivity {
    private ProgressUtil progressUtil;
    private MyApp app;
    @Bind(R.id.activity_login_ll_parent)LinearLayout mLLParent;//父容器
    @Bind(R.id.activity_login_et_account)EditText mETAccount;//账户
    @Bind(R.id.activity_login_et_pwd)EditText mETPwd;//密码

    private String account;
    private String pwd;
    private int shopId;
    private int shopType;
    private int userId;

    @Override
    protected void onCreate( Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_login);
        ButterKnife.bind(this);
        app= (MyApp) getApplication();
        app.addActivity(this);
        //初始化个推
        PushManager.getInstance().initialize(this.getApplicationContext());
        /**
         * 消息回调
         */
        MyPushReceiver.setOnGetPushMessageListener(new MyPushReceiver.OnGetPushMessageListener() {
            @Override
            public void onReceivedMessage(String message) {
                Toast.makeText(LoginActivity.this,message, Toast.LENGTH_SHORT).show();
            }
        });

        progressUtil=new ProgressUtil(this);

        if(app.getCurrentUser()!=null){
            oneKeyLogin();
        }


    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        ButterKnife.unbind(this);
        app.removeActivity(this);
    }

    @OnClick({R.id.activity_login_btn_submit,R.id.activity_login_tv_forget_pwd})
    public void loginClick(View view){
        switch (view.getId()){
            //登录
            case R.id.activity_login_btn_submit:

                if(checkBeforeLogin()){
                    submit();
                }
                break;
            //忘记密码
            case R.id.activity_login_tv_forget_pwd:
                Intent intent=new Intent(LoginActivity.this,GetPwdBackActivity.class);
                startActivity(intent);
                break;
        }
    }

    private boolean checkBeforeLogin(){
        if(TextUtils.isEmpty(mETAccount.getText().toString())){
            Snackbar.make(mLLParent,"账户名为空",Snackbar.LENGTH_SHORT).show();
            return false;
        }
        if(TextUtils.isEmpty(mETPwd.getText().toString())){
            Snackbar.make(mLLParent,"登录密码",Snackbar.LENGTH_SHORT).show();
            return false;
        }

        if(TextUtils.isEmpty(app.getSpf().getString("cid","none-cid"))){
            Snackbar.make(mLLParent,"CID 获取失败,请检查网络连接",Snackbar.LENGTH_SHORT).show();
            return false;
        }

        return true;
    }

    /**
     * 普通登录请求
     */
    public void submit(){
        RequestParams params=new RequestParams(BnUrl.loginUrl);
        params.setUseCookie(true);
        params.addBodyParameter("userName",mETAccount.getText().toString());
        params.addBodyParameter("password",mETPwd.getText().toString());
        params.addBodyParameter("cid",app.getSpf().getString("cid","none-cookie"));

        x.http().post(params, new Callback.ProgressCallback<JSONObject>() {
            @Override
            public void onSuccess(JSONObject response) {
                if(response!=null){
                    try {
                        boolean result=response.getBoolean("result");
                        String resultMsg=response.getString("resultMsg");
                        int resultData=response.getInt("resultData");
                        //登录成功
                        if(result){
                            String c= SessionUtil.getCookie();

                            if(!TextUtils.isEmpty(c)){
                                app.getSpf().edit().putString("cookie",c).commit();
                            }
                            account=mETAccount.getText().toString();
                            pwd=mETPwd.getText().toString();
                            userId=resultData;
                            pullUserInfo(String.valueOf(userId));
                        }else{
                            Snackbar.make(mLLParent,resultMsg,Snackbar.LENGTH_SHORT).show();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                LogUtil.e(ex.toString());
                progressUtil.dismissProgress();
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }

            @Override
            public void onWaiting() {

            }

            @Override
            public void onStarted() {
                progressUtil.showProgress(false);
            }

            @Override
            public void onLoading(long total, long current, boolean isDownloading) {

            }
        });


    }


    /**
     * 一键登录
     */
    private void oneKeyLogin(){

        if(app.getCurrentUser()==null){
            return;
        }

        if(TextUtils.isEmpty(app.getCurrentUser().getAccount())){
            return;
        }

        if(TextUtils.isEmpty(app.getCurrentUser().getPwd())){
            return;
        }

        if(TextUtils.isEmpty(String.valueOf(app.getCurrentUser().getShopId()))){
            return;
        }

        if(TextUtils.isEmpty(String.valueOf(app.getCurrentUser().getShopType()))){
            return;
        }

        if(TextUtils.isEmpty(app.getSpf().getString("cid","none-cid"))){
            return;
        }

        RequestParams params=new RequestParams(BnUrl.loginUrl);
        params.setUseCookie(true);
        final String s1=app.getCurrentUser().getAccount().toString();
        final String s2=app.getCurrentUser().getPwd().toString();
        params.addBodyParameter("userName",s1);
        params.addBodyParameter("password",s2);
        params.addBodyParameter("cid",app.getSpf().getString("cid","none_cid"));
        x.http().post(params, new Callback.ProgressCallback<JSONObject>() {
            @Override
            public void onSuccess(JSONObject response) {

                if(response!=null){
                    LogUtil.e("自动登录结果："+response.toString());
                    try {
                        boolean result=response.getBoolean("result");
                        int resultData=response.getInt("resultData");//id
                        String resultMsg=response.getString("resultMsg");
                        //登录成功
                        if(result){
                            String c= SessionUtil.getCookie();
                            if(c!=null){
                                //保存 cookie
                                app.getSpf().edit().putString("cookie",c).commit();
                            }
                            account=s1;
                            pwd=s2;
                            userId=resultData;
                            pullUserInfo(String.valueOf(userId));

                        } else{
                            LogUtil.e("自动登录失败："+resultMsg);
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                            progressUtil.dismissProgress();
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {

            }

            @Override
            public void onWaiting() {

            }

            @Override
            public void onStarted() {
               LogUtil.e("开始自动登录");
            }

            @Override
            public void onLoading(long total, long current, boolean isDownloading) {

            }
        });

    }


    /**
     * 根据用户 id 查询个人信息
     * @param id
     */
    public void pullUserInfo(String id){
        RequestParams params=new RequestParams(BnUrl.pullUserInfo);
        params.setUseCookie(false);
        params.addHeader("Cookie",app.getSpf().getString("cookie","none-cookie"));
        params.addBodyParameter("ctype","user");
        params.addBodyParameter("jf","store");
        params.addBodyParameter("cond","{id:"+id+"}");
        x.http().post(params, new Callback.CommonCallback<JSONObject>() {

            @Override
            public void onSuccess(JSONObject response) {
                if(response!=null){
                    try {
                        JSONArray resultList=response.getJSONArray("resultList");
                        if(resultList.length()>0){
                            shopId=resultList.getJSONObject(0).getJSONObject("store").getInt("id");
                            shopType=resultList.getJSONObject(0).getJSONObject("store").getInt("type");

                            LogUtil.e("info-id:"+shopId);
                            LogUtil.e("info-type:"+shopType);

                            UserBean ub=new UserBean();
                            ub.setUserId(userId);
                            ub.setAccount(account);
                            ub.setPwd(pwd);
                            ub.setShopId(shopId);
                            ub.setShopType(shopType);
                            app.saveCurrentUser(ub);
                            progressUtil.dismissProgress();
                            /**
                             * 跳转到主页
                             */
                            Intent intent=new Intent(LoginActivity.this,IndexActivity.class);
                            startActivity(intent);
                            finish();
                        }

                    } catch (JSONException e) {
                        e.printStackTrace();
                    }


                }
            }

            @Override
            public void onError(Throwable ex, boolean isOnCallback) {
                LogUtil.e(ex.toString());
                progressUtil.dismissProgress();
            }

            @Override
            public void onCancelled(CancelledException cex) {

            }

            @Override
            public void onFinished() {
                progressUtil.dismissProgress();
            }
        });
    }

}
